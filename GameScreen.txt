import 'dart:async';
import 'package:flutter/material.dart';
import 'package:ondevice/bird.dart';
import 'DrawerScreen.dart';
import 'barriers.dart';

class GameScreen extends StatefulWidget {
  @override
  _GameScreenState createState() => _GameScreenState();
}

class _GameScreenState extends State<GameScreen> {
  @override
  Widget build(BuildContext context) {
    return new MaterialApp(
        theme: ThemeData(
            primaryColor: Colors.blueGrey[800]
        ),
        home: Scaffold(
          resizeToAvoidBottomInset: true,
          // backgroundColor: Colors.blueGrey[900],
          // appBar: AppBar(
          //     title: Text("Naughty or Nice?"),
          //     centerTitle: true,
          //     elevation: 0.0,
          //     shape: RoundedRectangleBorder(
          //       borderRadius: BorderRadius.circular(25.0),
          //     )
          // ),
          body: Stack(
            children: [
              DrawerScreen(),
              GameScreenBuild()
            ],
          ),

        )
    );
  }
}

// class GameScreenBuild extends StatefulWidget {
//   @override
//   _GameScreenBuildState createState() => _GameScreenBuildState();
// }
//
// class _GameScreenBuildState extends State<GameScreenBuild> {
//
//   double xOffset = 0;
//   double yOffset = 0;
//   double scaleFactor = 1;
//   bool isDrawerOpen = false;
//   double riderX = 0.0;
//   double tapLoc = 0.0;
//   bool gameStarted = false;
//   Timer timer_big;
//
//
//
//   void slide(double x_coor, {bool small = false}) {
//     Timer.periodic(Duration(milliseconds: 30), (timer) {
//       if(x_coor < 180.0){
//         setState(() {
//           if (riderX>(-0.85)) {
//             if(small){
//               riderX -= 0.5;
//             }
//             else {
//               riderX -= 0.2;
//             }
//           }
//         });
//         if(riderX < -0.9){
//           timer.cancel();
//         }
//       }
//       else{
//         setState(() {
//           if (riderX<0.85) {
//             if(small){
//               riderX += 0.5;
//             }
//             else {
//               riderX += 0.2;
//             }
//           }
//         });
//         if(riderX > 0.9){
//           timer.cancel();
//         }
//       }
//
//       if(small){
//         timer.cancel();
//       }
//
//
//       timer_big = timer;
//     });
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return AnimatedContainer(
//
//         transform: Matrix4.translationValues(xOffset, yOffset, 0)..scale(scaleFactor),
//
//         duration: Duration(milliseconds: 250),
//
//
//         decoration: BoxDecoration(
//           color: Colors.grey[350],
//           borderRadius: BorderRadius.circular(isDrawerOpen?40:0.0),
//           boxShadow: [BoxShadow(blurRadius: 20, color: Color(0xff450000), spreadRadius: 10)],
//         ),
//
//
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.center,
//           children: <Widget>[
//
//             SizedBox(
//               height: 30,
//               // width: 200,
//             ),
//
//             //just for vertical spacing
//
//             Row(
//               mainAxisAlignment: MainAxisAlignment.spaceBetween,
//               children: [
//                 isDrawerOpen?IconButton(icon: Icon(Icons.arrow_back_ios, color: Colors.red[900],), onPressed: () {
//                   setState(() {
//                     xOffset = 0;
//                     yOffset = 0;
//                     scaleFactor = 1;
//                     isDrawerOpen = false;
//                   });
//                 }):
//                 IconButton(icon: Icon(Icons.menu , color: Colors.red[900]) , onPressed: () {
//                   setState(() {
//                     xOffset = 180;
//                     yOffset = 70;
//                     scaleFactor = 0.8;
//                     isDrawerOpen = true;
//                   });
//                 }),
//                 Text('Naughty or Nice?',
//                   textScaleFactor: 1.5,
//                   style: TextStyle(
//                     color: Colors.red[900],
//                   ),),
//                 SizedBox(
//                   height: 30,
//                   width: 30,
//                 ),
//               ],
//
//             )    ,
//
//             Container(
//               height: 15,
//
//               child: Center(child: Text("Score - 10")),
//
//             ),
//
//             Container(
//               height: 15,
//
//               child: Center(child: Text("Best - 10")),
//
//             ),
//
//             Container(
//
//               height: gameStarted?0:300,
//               child: Column(
//                 mainAxisAlignment: MainAxisAlignment.spaceEvenly,
//                 children: [
//                   Text("TAP TO PLAY", style: TextStyle(fontSize: 50),),
//                   Text("Tap, don't long-press :)", style: TextStyle(fontSize: 20),),
//
//                 ],
//               ),
//
//
//             ),
//
//             Expanded(
//               child: GestureDetector(
//
//                 // onTapUp: (details) {slide(details.globalPosition.dx, small: true); print(details.globalPosition.dx); },
//                 // onTapUp: (details) {timer_big.cancel();},
//                 onPanStart: (details) {slide(details.globalPosition.dx); print(details.globalPosition.dx); gameStarted = true;},
//                 onPanEnd: (details) {timer_big.cancel();},
//                 // onLongPressStart: (details) {slide(details.globalPosition.dx); print(details.globalPosition.dx);},
//                 // onLongPressEnd: (details) {timer_big.cancel();},
//                 child: AnimatedContainer(
//                   alignment: Alignment(riderX, 0.8),
//                   duration: Duration(milliseconds: 0),
//                   color: Colors.grey[350],
//                   child: MyBird(),
//                 ),
//               ),
//             )
//
//
//           ],
//         )
//     );
//   }
// }

class GameScreenBuild extends StatefulWidget {
  @override
  _GameScreenBuildState createState() => _GameScreenBuildState();
}

class _GameScreenBuildState extends State<GameScreenBuild> {

  double xOffset = 0;
  double yOffset = 0;
  double scaleFactor = 1;
  bool isDrawerOpen = false;
  static double birdYaxis = 0;
  double time = 0;
  double height = 0;
  double initialHeight = birdYaxis;
  bool gameHasStarted = false;
  double barrierXone = 1.8;
  double barrierXtwo = 1.8 + 1.5;
  double barrierXthree = 1.8 + 3;
  bool gameStarted = false;
  int score = 0;
  int highscore = 0;

  @override
  void initState() {
    setState(() {
      birdYaxis = 0;
      time = 0;
      height = 0;
      initialHeight = birdYaxis;
      barrierXone = 1.8;
      barrierXtwo = 1.8 + 1.5;
      barrierXthree = 1.8 + 3;
      gameStarted = false;
      score = 0;
    });
  }

  void jump() {
    setState(() {
      time = 0;
      initialHeight = birdYaxis;
    });
  }

  bool checkLose() {
    if (barrierXone < 0.2 && barrierXone > -0.2) {
      if (birdYaxis < -0.3 || birdYaxis > 0.7) {
        return true;
      }
    }
    if (barrierXtwo < 0.2 && barrierXtwo > -0.2) {
      if (birdYaxis < -0.8 || birdYaxis > 0.4) {
        return true;
      }
    }
    if (barrierXthree < 0.2 && barrierXthree > -0.2) {
      if (birdYaxis < -0.4 || birdYaxis > 0.7) {
        return true;
      }
    }
    return false;
  }

  void startGame() {
    gameHasStarted = true;
    Timer.periodic(Duration(milliseconds: 60), (timer) {
      time += 0.05;
      height = -4.9 * time * time + 2.8 * time;
      setState(() {
        birdYaxis = initialHeight - height;
        if (barrierXone < -2) {
          score++;
          barrierXone += 4.5;
        } else {
          barrierXone -= 0.04;
        }
        if (barrierXtwo < -2) {
          score++;

          barrierXtwo += 4.5;
        } else {
          barrierXtwo -= 0.04;
        }
        if (barrierXthree < -2) {
          score++;

          barrierXthree += 4.5;
        } else {
          barrierXthree -= 0.04;
        }
      });
      if (birdYaxis > 1.3 || checkLose()) {
        timer.cancel();
        _showDialog();
      }
    });
  }

  void _showDialog() {
    showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            backgroundColor: Colors.brown,
            title: Text(
              "GAME OVER",
              style: TextStyle(color: Colors.white),
            ),
            content: Text(
              "Score: " + score.toString(),
              style: TextStyle(color: Colors.white),
            ),
            actions: [
              FlatButton(
                child: Text(
                  "PLAY AGAIN",
                  style: TextStyle(color: Colors.white),
                ),
                onPressed: () {
                  if (score > highscore) {
                    highscore = score;
                  }
                  initState();
                  setState(() {
                    gameHasStarted = false;
                  });
                  Navigator.of(context).pop();

                },
              )
            ],
          );
        });
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedContainer(

      transform: Matrix4.translationValues(xOffset, yOffset, 0)..scale(scaleFactor),

        duration: Duration(milliseconds: 250),


        decoration: BoxDecoration(
          color: Colors.grey[350],
          borderRadius: BorderRadius.circular(isDrawerOpen?40:0.0),
          boxShadow: [BoxShadow(blurRadius: 20, color: Color(0xff450000), spreadRadius: 10)],
        ),

      child: GestureDetector(
        onTap: () {
          if (gameHasStarted) {
            jump();
          } else {
            startGame();
          }
        },
        child: Scaffold(
          body: Column(
            children: [
              SizedBox(
                height: 30,
                // width: 200,
              ),

            //just for vertical spacing

            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                isDrawerOpen?IconButton(icon: Icon(Icons.arrow_back_ios, color: Colors.red[900],), onPressed: () {
                  setState(() {
                    xOffset = 0;
                    yOffset = 0;
                    scaleFactor = 1;
                    isDrawerOpen = false;
                  });
                }):
                IconButton(icon: Icon(Icons.menu , color: Colors.red[900]) , onPressed: () {
                  setState(() {
                    xOffset = 180;
                    yOffset = 70;
                    scaleFactor = 0.8;
                    isDrawerOpen = true;
                  });
                }),
                Text('Naughty or Nice?',
                  textScaleFactor: 1.5,
                  style: TextStyle(
                    color: Colors.red[900],
                  ),),
                SizedBox(
                  height: 30,
                  width: 30,
                ),
              ],

            )    ,
              Expanded(
                  flex: 3,
                  child: Stack(
                    children: [
                      AnimatedContainer(
                        alignment: Alignment(0, birdYaxis),
                        duration: Duration(milliseconds: 0),
                        color: Colors.blueGrey[300],
                        child: MyBird(),
                      ),
                      Container(
                        alignment: Alignment(0, -0.3),
                        child: gameHasStarted
                            ? Text(" ")
                            : Text("T A P  T O  P L A Y",
                            style:
                            TextStyle(fontSize: 40, color: Colors.white)),
                      ),
                      AnimatedContainer(
                        alignment: Alignment(barrierXone, 1.3),
                        duration: Duration(milliseconds: 0),
                        child: MyBarrier(
                          size: 200.0,
                        ),
                      ),
                      AnimatedContainer(
                        alignment: Alignment(barrierXtwo, 2),
                        duration: Duration(milliseconds: 0),
                        child: MyBarrier(
                          size: 300.0,
                        ),
                      ),
                      AnimatedContainer(
                        alignment: Alignment(barrierXthree, 1.1),
                        duration: Duration(milliseconds: 0),
                        child: MyBarrier(
                          size: 100.0,
                        ),
                      ),
                      AnimatedContainer(
                        alignment: Alignment(barrierXone, -1.1),
                        duration: Duration(milliseconds: 0),
                        child: MyBarrier(
                          size: 150.0,
                        ),
                      ),
                      AnimatedContainer(
                        alignment: Alignment(barrierXtwo, -1.1),
                        duration: Duration(milliseconds: 0),
                        child: MyBarrier(
                          size: 100.0,
                        ),
                      ),
                      AnimatedContainer(
                        alignment: Alignment(barrierXthree, -1.1),
                        duration: Duration(milliseconds: 0),
                        child: MyBarrier(
                          size: 200.0,
                        ),
                      ),
                    ],
                  )),
              Container(
                height: 15,
                color: Colors.blueGrey[800],
              ),
              Expanded(
                child: Container(
                  color: Colors.blueGrey[700],
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text("SCORE",
                              style:
                              TextStyle(color: Colors.white, fontSize: 20)),
                          SizedBox(
                            height: 20,
                          ),
                          Text(score.toString(),
                              style:
                              TextStyle(color: Colors.white, fontSize: 35)),
                        ],
                      ),
                      Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text("BEST",
                              style:
                              TextStyle(color: Colors.white, fontSize: 20)),
                          SizedBox(
                            height: 20,
                          ),
                          Text(highscore.toString(),
                              style:
                              TextStyle(color: Colors.white, fontSize: 35)),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
